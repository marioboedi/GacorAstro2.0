
--- FITUR CRUD Account
================> account.js (Angular.js)
// Fetch user data and display username
fetch('/api/user')
    .then(response => response.json())
    .then(data => {
        document.getElementById('userName').textContent = data.userName;
    })
    .catch(err => console.error('Error fetching user data:', err));

// Logout function
function logout() {
    fetch('/logout')
        .then(() => {
            window.location.href = '/login';
        })
        .catch(err => console.error('Error logging out:', err));
}

// Handle account editing
const editForm = document.getElementById('editForm');
editForm.addEventListener('submit', async (event) => {
    event.preventDefault();

    const newName = document.getElementById('editName').value;
    const newEmail = document.getElementById('editEmail').value;
    const newPassword = document.getElementById('editPassword').value;

    try {
        const response = await fetch('/api/user', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name: newName, email: newEmail, password: newPassword }),
        });

        const result = await response.json();
        if (response.ok) {
            alert('Account updated successfully!');
            // Redirect to the homepage
            window.location.href = '/';
        } else {
            alert('Error: ' + result.error);
        }
    } catch (error) {
        console.error('Error updating account:', error);
    }
});

// Handle account deletion
const deleteButton = document.getElementById('deleteAccount');
deleteButton.addEventListener('click', async () => {
    if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
        try {
            const response = await fetch('/api/user', { method: 'DELETE' });
            if (response.ok) {
                alert('Account deleted successfully.');
                window.location.href = '/register';
            } else {
                alert('Failed to delete account.');
            }
        } catch (error) {
            console.error('Error deleting account:', error);
        }
    }
});

================> account.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Account</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa; /* Warna latar yang lebih lembut */
        }
        .container {
            max-width: 600px; /* Membatasi lebar kontainer */
            background: #fff;
            padding: 20px;
            margin-top: 50px;
            border-radius: 10px; /* Membuat sudut membulat */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Memberikan bayangan */
        }
        .btn-danger {
            background-color: #dc3545;
        }
    </style>
</head>
<body>
    <div class="container text-center">
        <h1 class="mb-4">Your Account</h1>
        <p>Welcome, <span id="userName" class="fw-bold">User</span>!</p>

        <div class="d-flex justify-content-center gap-2 mb-3">
            <button onclick="logout()" class="btn btn-primary mb-3">Logout</button>
            <button id="deleteAccount" class="btn btn-danger mb-3">Delete Account</button>

        </div>
            <hr>

        <h3 class="mb-3">Edit Account</h3>
        <form id="editForm" class="text-start">
            <div class="mb-3">
                <label for="editName" class="form-label">New Name</label>
                <input type="text" id="editName" placeholder="Enter new name" class="form-control">
            </div>
            <div class="mb-3">
                <label for="editEmail" class="form-label">New Email</label>
                <input type="email" id="editEmail" placeholder="Enter new email" class="form-control">
            </div>
            <div class="mb-3">
                <label for="editPassword" class="form-label">New Password</label>
                <input type="password" id="editPassword" placeholder="Enter new password" class="form-control">
            </div>
            <button type="submit" class="btn btn-success w-100">Save Changes</button>
        </form>
        <hr>

    </div>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/account.js"></script>
</body>
</html>


================> app.js (backend)

// Halaman akun (hanya untuk pengguna yang sudah login)
app.get('/account', checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'account.html'));
});

// PUT: Mengedit data pengguna
app.put('/api/user', checkAuth, async (req, res) => {
    try {
        const { name, email, password } = req.body;

        // Ambil data pengguna berdasarkan session userId
        const existingUser = await loginCollection.findById(req.session.userId);

        if (!existingUser) {
            return res.status(404).json({ error: 'User not found' });
        }

        // Gunakan data lama jika tidak ada data baru
        const updatedData = {
            name: name || existingUser.name,
            email: email || existingUser.email,
            password: password || existingUser.password,
        };

        // Update data pengguna
        const updatedUser = await loginCollection.findByIdAndUpdate(
            req.session.userId,
            updatedData,
            { new: true } // Return updated document
        );

        req.session.userName = updatedUser.name; // Update nama di session

        res.json({ message: 'User updated successfully', user: updatedUser });
    } catch (error) {
        console.error('Error updating user:', error);
        res.status(500).json({ error: 'Failed to update user' });
    }
});


// DELETE: Menghapus akun pengguna
app.delete('/api/user', checkAuth, async (req, res) => {
    try {
        const userId = req.session.userId;

        // Hapus data pengguna berdasarkan session userId
        const deletedUser = await loginCollection.findByIdAndDelete(userId);

        if (!deletedUser) {
            return res.status(404).json({ error: 'User not found' });
        }

        req.session.destroy((err) => {
            if (err) {
                return res.status(500).json({ error: 'Failed to log out after deleting account' });
            }
            res.json({ message: 'User deleted successfully' });
        });
    } catch (error) {
        res.status(500).json({ error: 'Failed to delete user' });
    }
});
--- FITUR CRUD Account


--- FITUR ALERT LOGIN
================> js/login.js

document.getElementById('loginForm').addEventListener('submit', async (event) => {
    event.preventDefault();

    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;

    try {
        const response = await fetch('/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password }),
        });

        const result = await response.json();

        if (response.ok) {
            // Redirect to the homepage if login successful
            window.location.href = '/';
        } else {
            // Show alert with error message
            alert(result.error || 'Failed to log in. Please try again.');
        }
    } catch (error) {
        console.error('Error during login:', error);
        alert('An unexpected error occurred. Please try again later.');
    }
});

================> app.js (backend)
        res.json({ message: 'Login successful' });



--- FITUR ALERT LOGIN


--- FITUR ULASAN

================> index.html
<div class="ulasan-container">
                <h1>GacorAstro</h1>
                <div class="rating">
                    <span>{{rating}}/5</span>
                </div>
                <div class="stars">
                    <span class="star" ng-class="{'one': rating >= 1}" ng-click="setRating(1)">★</span>
                    <span class="star" ng-class="{'two': rating >= 2}" ng-click="setRating(2)">★</span>
                    <span class="star" ng-class="{'three': rating >= 3}" ng-click="setRating(3)">★</span>
                    <span class="star" ng-class="{'four': rating >= 4}" ng-click="setRating(4)">★</span>
                    <span class="star" ng-class="{'five': rating >= 5}" ng-click="setRating(5)">★</span>
                </div>
                <p>Share your review:</p>
                <p><strong>{{userName}}</strong> <br> {{userEmail}}</p> <!-- Menampilkan nama dan email pengguna -->
                <textarea ng-model="newReview.text" placeholder="Write your review here"></textarea>
                <button ng-click="submitReview()">Submit</button>
        
                <div class="reviews">
                    <div ng-repeat="review in reviews">
                        <p><strong> <br>{{review.userName}}</strong> <br> {{review.userEmail}} <br> rated: {{review.rating}}/5</p> <!-- Menampilkan nama dan email pengulas -->
                        <p>"{{review.text}}"</p>
                        <button ng-click="editReview($index)">Edit</button>
                        <button ng-click="deleteReview($index)">Delete</button>
                    </div>
                </div>
            </div>


================> js/app.js

angular.module('reviewApp', [])
    .controller('reviewController', function($scope, $http) {
        // Ambil nama dan email pengguna dari API saat halaman dimuat
        $http.get('/api/user')
            .then(function(response) {
                $scope.userName = response.data.userName;  // Simpan nama pengguna
                $scope.userEmail = response.data.userEmail; // Simpan email pengguna
            })
            .catch(function(error) {
                console.error('Error fetching user data:', error);
            });

        // Initial reviews data
        $scope.reviews = [
            {rating: 5, text: 'Excellent app! Highly recommend.', userName: 'John Doe', userEmail: 'john@example.com'},
        ];

        // Model untuk rating dan review
        $scope.rating = 0;  // Rating awal
        $scope.newReview = { text: '' };

        // Fungsi untuk mengatur rating
        $scope.setRating = function(ratingValue) {
            $scope.rating = ratingValue;
        };

        // Fungsi untuk menambah review (CREATE)
        $scope.submitReview = function() {
            if ($scope.rating === 0 || !$scope.newReview.text) {
                alert('Silakan pilih rating dan beri ulasan.');
                return;
            }

            // Tambahkan review baru ke dalam array
            $scope.reviews.push({
                rating: $scope.rating,
                text: $scope.newReview.text,
                userName: $scope.userName, // Menambahkan nama pengguna
                userEmail: $scope.userEmail // Menambahkan email pengguna
            });

            // Reset form
            $scope.newReview.text = '';
            $scope.rating = 0;
        };

        // Fungsi untuk mengedit review (UPDATE)
        $scope.editReview = function(index) {
            const review = $scope.reviews[index];
            $scope.newReview.text = review.text;
            $scope.rating = review.rating;

            // Hapus review yang sedang diedit
            $scope.reviews.splice(index, 1);
        };

        // Fungsi untuk menghapus review (DELETE)
        $scope.deleteReview = function(index) {
            $scope.reviews.splice(index, 1);
        };

    });


================> app.js (backend)

// Endpoint API untuk mendapatkan data pengguna
app.get('/api/user', checkAuth, (req, res) => {
    res.json({ 
        userName: req.session.userName, 
        userEmail: req.session.userEmail  // Pastikan email pengguna juga terkirim
    });
});


================> app.js (backend)  ===> // Simpan session pengguna

req.session.userId = user._id;
req.session.userName = user.name;
req.session.userEmail = user.email;  // Pastikan email juga disimpan di session


--- FITUR ULASAN


--- FITUR INPUT ZODIAK

================> index.html 
<!-- Form Input untuk Tanggal Lahir -->
                <div class="text-center mb-4">
                    <input 
                        type="number" 
                        ng-model="birthDay" 
                        placeholder="Day (1-31)" 
                        min="1" max="31" 
                        class="form-control d-inline-block w-auto mb-2">
                    
                    <select 
                        ng-model="birthMonth" 
                        class="form-control d-inline-block w-auto mb-2">
                        <option value="" disabled selected>Choose a month</option>
                        <option ng-repeat="month in months" value="{{$index + 1}}">{{month}}</option>
                    </select>
                    
                    <button 
                        class="btn btn-primary" 
                        ng-click="findZodiac()">Find Zodiac</button>
                </div>

<!-- Hasil Pencarian -->
                <div class="text-center mb-5" ng-if="userZodiac">
                    <h2 class="text-white mb-2">Your Zodiac</h2>
                    <a href="{{userZodiac.link}}" class="text-decoration-none d-block text-white">
                        <h4 class="text-center">{{userZodiac.name}}</h4>
                        <h1 class="text-center">{{userZodiac.symbol}}</h1>
                        <p class="text-white text-center">{{userZodiac.dateRange}}</p>
                    </a>
                </div>


================> js/app.js

 // SECTION ZODIAK

    angular.module('zodiacApp', [])
    .controller('zodiacController', function ($scope) {
        $scope.months = [
            'January', 'February', 'March', 'April', 'May', 
            'June', 'July', 'August', 'September', 
            'October', 'November', 'December'
        ];

        $scope.zodiacs = [
            { name: 'Capricorn', symbol: 'P', dateRange: '22 December - 19 January', startDate: { day: 22, month: 12 }, endDate: { day: 19, month: 1 }, link: 'zodiak/capricorn.html' },
            { name: 'Aquarius', symbol: 'Q', dateRange: '20 January - 18 February', startDate: { day: 20, month: 1 }, endDate: { day: 18, month: 2 }, link: 'zodiak/aquarius.html' },
            { name: 'Pisces', symbol: 'S', dateRange: '19 February - 20 March', startDate: { day: 19, month: 2 }, endDate: { day: 20, month: 3 }, link: 'zodiak/pisces.html' },
            { name: 'Aries', symbol: 'N', dateRange: '21 March - 19 April', startDate: { day: 21, month: 3 }, endDate: { day: 19, month: 4 }, link: 'zodiak/aries.html' },
            { name: 'Taurus', symbol: 'O', dateRange: '20 April - 20 May', startDate: { day: 20, month: 4 }, endDate: { day: 20, month: 5 }, link: 'zodiak/taurus.html' },
            { name: 'Gemini', symbol: 'R', dateRange: '21 May - 20 June', startDate: { day: 21, month: 5 }, endDate: { day: 20, month: 6 }, link: 'zodiak/gemini.html' },
            { name: 'Cancer', symbol: 'T', dateRange: '21 June - 22 July', startDate: { day: 21, month: 6 }, endDate: { day: 22, month: 7 }, link: 'zodiak/cancer.html' },
            { name: 'Leo', symbol: 'U', dateRange: '23 July - 22 August', startDate: { day: 23, month: 7 }, endDate: { day: 22, month: 8 }, link: 'zodiak/leo.html' },
            { name: 'Virgo', symbol: 'V', dateRange: '23 August - 22 September', startDate: { day: 23, month: 8 }, endDate: { day: 22, month: 9 }, link: 'zodiak/virgo.html' },
            { name: 'Libra', symbol: 'W', dateRange: '23 September - 22 October', startDate: { day: 23, month: 9 }, endDate: { day: 22, month: 10 }, link: 'zodiak/libra.html' },
            { name: 'Scorpio', symbol: 'X', dateRange: '23 October - 21 November', startDate: { day: 23, month: 10 }, endDate: { day: 21, month: 11 }, link: 'zodiak/scorpio.html' },
            { name: 'Sagittarius', symbol: 'Y', dateRange: '22 November - 21 December', startDate: { day: 22, month: 11 }, endDate: { day: 21, month: 12 }, link: 'zodiak/sagittarius.html' }
        ];

        $scope.findZodiac = function () {
            const day = parseInt($scope.birthDay);
            const month = parseInt($scope.birthMonth);

            if (!day || !month || day < 1 || day > 31 || month < 1 || month > 12) {
                alert('Please enter a valid day and month!');
                return;
            }

            $scope.userZodiac = null;

            $scope.zodiacs.forEach(zodiac => {
                const start = zodiac.startDate;
                const end = zodiac.endDate;

                if (
                    (month === start.month && day >= start.day) ||
                    (month === end.month && day <= end.day) ||
                    (start.month > end.month && (month === start.month && day >= start.day || month === end.month && day <= end.day))
                ) {
                    $scope.userZodiac = zodiac;
                }
            });

            if (!$scope.userZodiac) {
                alert('No zodiac found for the given date.');
            }
        };
    });


    // SECTION ZODIAK

--- FITUR INPUT ZODIAK


