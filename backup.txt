https://chatgpt.com/share/6749a259-8acc-8006-bcd6-8720c37fa257

https://chatgpt.com/share/6749fbe2-34cc-8006-93f6-f5cb372c6e87


<!-- .gitignore -->

#dependencies
/node_modules

# Mengabaikan semua file dalam folder uploads
uploads/*

# Tidak mengabaikan file default-profile.png
!uploads/default-profile.png


<!-- .gitignore -->


<!-- app.js -->

const express = require('express');
const app = express();
const session = require('express-session');
const path = require('path');
const zodiacRoutes = require('./routes/zodiacRoutes');
const reviewRoutes = require('./routes/reviewRoutes');  
const userRoutes = require('./routes/userRoutes'); // Import user routes

// Middleware dan konfigurasi
app.use(express.static('public'));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(
    session({
        secret: 'your_secret_key', // Ganti dengan string rahasia
        resave: false,
        saveUninitialized: false,
    })
);

app.use('/api', zodiacRoutes);
app.use('/api', reviewRoutes);
app.use('/api', userRoutes);  // Gunakan user routes di sini

// Middleware untuk melindungi halaman yang membutuhkan login
function checkAuth(req, res, next) {
    if (!req.session.userId) {
        return res.redirect('/login');
    }
    next();
}

// Middleware untuk mencegah akses ke login/register jika sudah login
function checkNotAuth(req, res, next) {
    if (req.session.userId) {
        return res.redirect('/');
    }
    next();
}

// Halaman utama (hanya untuk pengguna yang sudah login)
app.get('/', checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'index.html'));
});

// Halaman login
app.get('/login', checkNotAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'login.html'));
});

// Halaman register
app.get('/register', checkNotAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'register.html'));
});

// Endpoint API untuk mendapatkan data pengguna
app.get('/api/user', checkAuth, (req, res) => {
    res.json({ 
        userName: req.session.userName, 
        userEmail: req.session.userEmail  // Pastikan email pengguna juga terkirim
    });
});

// Logout
app.get('/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            return res.status(500).json({ error: 'Could not log out. Please try again.' });
        }
        res.redirect('/login');
    });
});

// Halaman akun (hanya untuk pengguna yang sudah login)
app.get('/account', checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'account.html'));
});

// Jalankan server
app.listen(3000, () => {
    console.log('Server running at http://localhost:3000');
});


<!-- app.js -->


<!-- user.js -->

const mongoose = require('../db'); // Import koneksi database

// Definisi schema untuk koleksi user
const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    password: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true
    },
    profilePic: { 
        type: String, 
        default: '/uploads/default-profile.png' 
    }, 

});

// Buat model berdasarkan schema
const User = mongoose.model('User', userSchema);

module.exports = User; // Ekspor model


<!-- user.js -->


<!-- userRoutes.js -->

const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const upload = multer({ dest: 'uploads/' }); // Tentukan folder penyimpanan sementara
const User = require('../models/user'); // Ganti dengan model User

// Register pengguna baru
router.post('/register', async (req, res) => {
    const data = new User({
        name: req.body.name,
        password: req.body.password,
        email: req.body.email,
    });

    try {
        const existingUser = await User.findOne({ email: req.body.email });

        if (existingUser) {
            return res.status(400).json({ error: 'Email already registered' });
        } else {
            await data.save();
            res.redirect('/login');
        }
    } catch (error) {
        res.status(500).json({ error: 'Server error, Try again.' });
    }
});

// Login pengguna
router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email: email });

        if (!user) {
            return res.status(400).json({ error: 'Incorrect email or password' });
        }

        if (user.password !== password) {
            return res.status(400).json({ error: 'Incorrect password' });
        }

        // Simpan session pengguna
        req.session.userId = user._id;
        req.session.userName = user.name;
        req.session.userEmail = user.email;  // Pastikan email juga disimpan di session

        console.log(req.session);
        res.redirect('/');
    } catch (error) {
        res.status(500).json({ error: 'An error occurred. Please try again.' });
    }
});

// PUT: Mengedit data pengguna
router.put('/user', async (req, res) => {
    try {
        const { name, email, password } = req.body;

        // Ambil data pengguna berdasarkan session userId
        const existingUser = await User.findById(req.session.userId);

        if (!existingUser) {
            return res.status(404).json({ error: 'User not found' });
        }

        // Gunakan data lama jika tidak ada data baru
        const updatedData = {
            name: name || existingUser.name,
            email: email || existingUser.email,
            password: password || existingUser.password,
        };

        // Update data pengguna
        const updatedUser = await User.findByIdAndUpdate(
            req.session.userId,
            updatedData,
            { new: true } // Return updated document
        );

        req.session.userName = updatedUser.name; // Update nama di session

        res.json({ message: 'User updated successfully', user: updatedUser });
    } catch (error) {
        console.error('Error updating user:', error);
        res.status(500).json({ error: 'Failed to update user' });
    }
});

// DELETE: Menghapus akun pengguna
router.delete('/user', async (req, res) => {
    try {
        const userId = req.session.userId;

        // Hapus data pengguna berdasarkan session userId
        const deletedUser = await User.findByIdAndDelete(userId);

        if (!deletedUser) {
            return res.status(404).json({ error: 'User not found' });
        }

        req.session.destroy((err) => {
            if (err) {
                return res.status(500).json({ error: 'Failed to log out after deleting account' });
            }
            res.json({ message: 'User deleted successfully' });
        });
    } catch (error) {
        res.status(500).json({ error: 'Failed to delete user' });
    }
});


// POST: Upload profile picture
// POST: Mengunggah gambar profil
router.post('/user/profile-pic', upload.single('profilePic'), async (req, res) => {
    try {
        const user = await User.findById(req.session.userId);

        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // Update path gambar profil di database
        const profilePicPath = `/uploads/${req.file.filename}`;
        user.profilePic = profilePicPath;

        await user.save();
        res.json({ message: 'Profile picture updated successfully', profilePic: profilePicPath });
    } catch (error) {
        res.status(500).json({ error: 'Failed to update profile picture' });
    }
});

// GET: Fetch profile picture
// routes/userRoutes.js
router.get('/user/profile-pic', async (req, res) => {
    try {
        const user = await User.findById(req.session.userId);
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }
        const profilePicPath = user.profilePic || '/uploads/default-profile.png';
        res.json({ profilePic: profilePicPath });
    } catch (error) {
        console.error('Error fetching profile picture:', error);
        res.status(500).json({ error: 'Failed to fetch profile picture' });
    }
});

// DELETE: Menghapus foto profil pengguna
router.delete('/user/delete-profile-pic', async (req, res) => {
    try {
        const userId = req.session.userId;

        // Cari user berdasarkan session userId
        const user = await User.findById(userId);

        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // Hapus foto profil (set kembali ke default)
        user.profilePic = '/uploads/default-profile.png';
        await user.save();

        res.json({ message: 'Profile picture deleted successfully' });
    } catch (error) {
        console.error('Error deleting profile picture:', error);
        res.status(500).json({ error: 'Failed to delete profile picture' });
    }
});



module.exports = router;


<!-- userRoutes.js -->


<!-- account.html -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Account</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/index.css">

    <!-- GOOGLE FONT -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lexend+Peta:wght@100..900&family=New+Amsterdam&family=Pirata+One&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&family=Lexend+Peta:wght@100..900&family=New+Amsterdam&family=Pirata+One&display=swap" rel="stylesheet">

    <!-- ANGULAR JS -->
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>

</head>
<body>

    <!-- NAVBAR -->
    <nav class="navbar navbar-expand-lg navbar-light animate__animated animate__fadeInDown ">
        <div class="container">
            <a class="navbar-brand" href="index.html">
                <span class="text-white fs-1 fs-md-3 fs-lg-5">GacorAstro</span>
            </a>
            <button class="navbar-toggler bg-white shadow-none" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto d-flex gap-4 text-center pt-lg-0 pt-4">
                <li class="nav-item">
                    <a class="nav-link active text-white"  href="#home">HOME</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link active text-white"  href="#zodiak">ZODIAK</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link text-white" href="#artikel">ARTIKEL</a>
                </li>


                <li class="nav-item">
                    <a class="nav-link text-white" href="#contact">CONTACT</a>
                </li>
                
                <li class="nav-item">
                    <a class="nav-link text-white" href="subscribe.html">SUBSCRIBE</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link text-white" href="/account">Account</a>
                </li>
                
                </ul>
            </div>
        </div>
    </nav>
    <!-- NAVBAR -->

    <div class="account" ng-app="accountApp" ng-controller="AccountController">
        <div class="container d-flex justify-content-center align-items-center flex-column">
            <div class="card shadow-lg" style="width: 100%; max-width: 500px;">
                <div class="card-body text-center">
                    <h1 class="card-title mb-4">Your Account</h1>
                    <p class="card-text">Welcome, <span id="userName" class="fw-bold">User</span>!</p>

                    <img id="profilePicPreview" src="/uploads/default-profile.png" alt="Profile Picture" class="rounded-circle mb-3" style="width: 150px; height: 150px; object-fit: cover;"     style="max-width: 200px;">

                    <form id="uploadForm" class="text-start">
                        <div class="mb-3">
                            <label for="profilePic" class="form-label">Upload New Profile Picture</label>
                            <input type="file" id="profilePic" class="form-control">
                        </div>
                        <div class="d-flex justify-content-center gap-2 mb-3">
                            <button type="submit" class="btn btn-success w-100">Upload Picture</button>
                        </div>
                    </form>
                    
                    <button id="deletePicButton" class="btn btn-danger w-100 mb-3">Delete Picture</button>

                    <div class="d-flex justify-content-center gap-2 mb-3">
                        <button onclick="logout()" class="btn btn-primary mb-3">Logout</button>
                        <button id="deleteAccount" class="btn btn-danger mb-3">Delete Account</button>
                    </div>
                    <hr>

                    <h3 class="mb-3">Edit Account</h3>
                    <form id="editForm" class="text-start">
                        <div class="mb-3">
                            <label for="editName" class="form-label">New Name</label>
                            <input type="text" id="editName" placeholder="Enter new name" class="form-control">
                        </div>
                        <div class="mb-3">
                            <label for="editEmail" class="form-label">New Email</label>
                            <input type="email" id="editEmail" placeholder="Enter new email" class="form-control">
                        </div>
                        <div class="mb-3">
                            <label for="editPassword" class="form-label">New Password</label>
                            <input type="password" id="editPassword" placeholder="Enter new password" class="form-control">
                        </div>
                        <button type="submit" class="btn btn-success w-100">Save Changes</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/account.js"></script>

    <script>
        // AngularJS Controller
        const app = angular.module('accountApp', []);
            app.controller('AccountController', ['$scope', '$http', function($scope, $http) {
                // Load user profile picture
                $http.get('/api/user/profile-pic').then((response) => {
                    document.getElementById('profilePicPreview').src = response.data.profilePic || '/uploads/default-profile.png';
                });

                // Preview uploaded file
                const profilePicInput = document.getElementById('profilePic');
                profilePicInput.addEventListener('change', () => {
                    const file = profilePicInput.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = () => {
                            document.getElementById('profilePicPreview').src = reader.result;
                        };
                        reader.readAsDataURL(file);
                    }
                });

                // Handle profile picture upload
                const uploadForm = document.getElementById('uploadForm');
                uploadForm.addEventListener('submit', async (event) => {
                    event.preventDefault();

                    const file = profilePicInput.files[0];
                    if (!file) {
                        return alert('Please choose a file to upload.');
                    }

                    const formData = new FormData();
                    formData.append('profilePic', file);

                    try {
                        const response = await fetch('/api/user/profile-pic', {
                            method: 'POST',
                            body: formData,
                        });

                        if (response.ok) {
                            alert('Profile picture updated successfully!');
                            location.reload();  // Refresh the page to load the updated profile picture
                        } else {
                            const result = await response.json();
                            alert('Error: ' + result.error);
                        }
                    } catch (error) {
                        console.error('Error uploading profile picture:', error);
                    }
                });

                // Handle delete profile picture
                // Handle delete profile picture
            const deletePicButton = document.getElementById('deletePicButton');
            deletePicButton.addEventListener('click', async () => {
                try {
                    const response = await fetch('/api/user/delete-profile-pic', {
                        method: 'DELETE',
                    });

                    if (response.ok) {
                        alert('Profile picture deleted successfully!');
                        document.getElementById('profilePicPreview').src = '/uploads/default-profile.png';  // Update to default image
                    } else {
                        const result = await response.json();
                        alert('Error: ' + result.error);
                    }
                } catch (error) {
                    console.error('Error deleting profile picture:', error);
                }
            });

            }]);


    </script>
</body>
</html>

<!-- account.html -->


<!-- BUAT FOLDER BARU 'uploads' -->



